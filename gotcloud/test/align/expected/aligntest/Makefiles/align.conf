index_EXT = $(recab_EXT).bai
DEDUP_TMP = $(TMP_DIR)/alignment.dedup
RUN_SPLIT = FALSE
VCFCOOKER = $(BIN_DIR)/vcfCooker
recab_RMDEP = 1
recab_RUN_DEDUP = dedup $(dedup_PARAMS) $(dedup_USER_PARAMS) --
verifyBamID_PARAMS = --vcf $(HM3_VCF)
CHRS = 20
qplot_EXT = qplot
BGZIP = $(BIN_DIR)/bgzip
RUN_PILEUP = FALSE
LD_NSNPS = 10000
verifyBamID_DEPEND = recab index
PER_MERGE_STEPS = verifyBamID qplot index recab
dedup_EXT = dedup.bam
GLFFLEX = $(BIN_DIR)/glfFlex --minMapQuality 0 --minDepth 1 --maxDepth 10000000 --uniformTsTv --smartFilter
THUNDER = $(BIN_DIR)/thunderVCF -r 30 --phase --dosage --compact --inputPhased $(THUNDER_STATES)
OUT_DIR = <outdir_path>
FILTER_MIN_STR = -20, -10
LIGATEVCF4 = perl $(SCRIPT_DIR)/ligateVcf4.pl
ALN_TMP = $(TMP_DIR)/alignment.aln
BWA_THREADS = -t 1
REMOTE_PREFIX = 
recab_REQ_EXES = $(BAM_EXE)
index_CMD = $(SAMTOOLS_EXE) index $(basename $^)
IGNORE_SM_CHECK = 
LIGATEVCF = perl $(SCRIPT_DIR)/ligateVcf.pl
VCF_SPLIT_CHROM = perl $(SCRIPT_DIR)/vcfSplitChr.pl
FILTER_MAX_STZ = 5, 10
FILTER_FORMULA_MAX_SAMPLES = 1000
cram_DEPEND = recab index verifyBamID qplot
BIN_DIR = $(GOTCLOUD_ROOT)/bin
recab_BINNING = 
REF = <gotcloud_root>/test/chr20Ref/human_g1k_v37_chr20.fa
BEAGLE_DIR = beagle
qplot_LABELS = recal
recab_PARAMS = --refFile $(REF) --dbsnp $(DBSNP_VCF) $(recab_STORE_OQ) $(recab_BINNING)
MOSAIK_MHP = -mhp 150
FILTER_MAX_AOI = 5
FILTER_WIN_INDEL = 5
ALIGN_CRAM_OUTPUT_STEPS = cramIndex cram
BASE_PREFIX = $(ALIGN_TEST_ROOT)
FILTER_ADDITIONAL = 
cram_REQ_EXES = $(SAMTOOLS_EXE)
dedup_REQ_EXES = $(BAM_EXE)
RUN_INDEX_FORCE = FALSE
MAKE_BASE_NAME = umake
RUN_BEAGLE = FALSE
RUN_INDEX = FALSE
DBSNP_VCF = <gotcloud_root>/test/chr20Ref/dbsnp135_chr20.vcf.gz
OFFSET_OFF_TARGET = 0
RUN_FILTER = FALSE
cram_DIR = $(FINAL_BAM_DIR)
MOSAIK_ALIGN_EXE = $(BIN_DIR)/MosaikAligner
MOSAIK_HS = -hs 15
MKB_TMP = $(TMP_DIR)/mosaikBuild
FILTER_MIN_NS = 
PE_ANN = $(REF_DIR)/pe.100.01.ann
SVM_CUTOFF = 0
verifyBamID_EXT = genoCheck
MD5_DIR = $(REF_DIR)/md5/
MOSAIK_BUILD_EXE = $(BIN_DIR)/MosaikBuild
SPLIT_DIR = split
RUN_THUNDER = FALSE
SVMMODEL = 
SPLIT4_DIR = split4
FILTER_FORMULA_MIN_SAMPLES = 100
verifyBamID_DIR = $(QC_DIR)
BEAGLE4 = java -Xmx4g -jar $(BIN_DIR)/b4.r1219.jar seed=993478 gprobs=true
cramIndex_EXT = cram.crai
GLF_INDEX = glfIndex.ped
BEAGLE = java -Xmx4g -jar $(BIN_DIR)/beagle.20101226.jar seed=993478 gprobs=true niterations=50 lowmem=true
BAM_DEPEND = FALSE
BAM_GLF_DIR = glfs/bams
FILTER_MIN_STZ = -5, -10
cramIndex_REQ_EXES = $(SAMTOOLS_EXE)
MOSAIK_JMP = $(REF_DIR)/
ASSERT_BAM_EXIST = FALSE
FASTQ_LIST = <gotcloud_root>/test/align/indexFile.txt
SAMTOOLS_EXE = $(BIN_DIR)/samtools
dedup_USER_PARAMS = 
dedup_DIR = $(DEDUP_TMP)
cramIndex_DIR = $(FINAL_BAM_DIR)
qplot_DIR = $(QC_DIR)
SAI_TMP = $(TMP_DIR)/bwa.sai.t
MD5_SCRIPT = $(SCRIPT_DIR)/seq_cache_populate.pl
INFOCOLLECTOR = $(BIN_DIR)/infoCollector
FILTER_MIN_SAMPLE_DP = 1
PREMO_EXE = $(BIN_DIR)/premo
GENOMESTRIP_MASK_FASTA = 
SAMTOOLS_FOR_PILEUP = $(BIN_DIR)/samtools-hybrid
VCFCAT = perl $(SCRIPT_DIR)/vcfCat.pl
BEAGLE2VCF = perl $(SCRIPT_DIR)/beagle2Vcf.pl
HM3_VCF = <gotcloud_root>/test/chr20Ref/hapmap_3.3.b37.sites.chr20.vcf.gz
BWA_QUAL = -q 15
VCF_DIR = vcfs
index_DIR = $(FINAL_BAM_DIR)
BATCH_TYPE = 
FILTER_MAX_MQ0 = 10
VCFMERGE = perl $(SCRIPT_DIR)/bams2vcfMerge.pl
SAMTOOLS_FOR_OTHERS = $(BIN_DIR)/samtools
TARGET_DIR = target
index_REQ_EXES = $(SAMTOOLS_EXE)
cramIndex_DEPEND = cram
BATCH_OPTS = 
verifyBamID_USER_PARAMS = 
BAM_EXE = $(BIN_DIR)/bam
ALIGN_TEST_ROOT = $(GOTCLOUD_ROOT)/test/align
qplot_IN = $(basename $^)
GEN_CRAM = 
RUN_SVM = FALSE
TMP_DIR = $(OUT_DIR)/tmp
SE_ANN = $(REF_DIR)/se.100.005.ann
merge_DIR = $(MERGE_TMP)
GOTCLOUD_ROOT = <gotcloud_root>
QPLOT_EXE = $(BIN_DIR)/qplot
BAM_LIST = $(OUT_DIR)/bam.list
VCFSPLIT4 = perl $(SCRIPT_DIR)/vcfSplit4.pl
VCFSUMMARY = perl $(SCRIPT_DIR)/vcf-summary
merge_EXT = merged.bam
RECAL_TMP = $(TMP_DIR)/alignment.recal
BAMUTIL_THINNING = --phoneHomeThinning 0
FILTER_MIN_NS_FRAC = .50
cram_RMDEP = 1
VCF2BEAGLE = perl $(SCRIPT_DIR)/vcf2Beagle.pl --PL
MAKE_OPTS = 
FILTER_MIN_MQ = 20
FILTER_MAX_CBR = 20, 10
ONE_BWA = 0
VIEW_CRAM = 
SVMCLASSIFY = $(BIN_DIR)/svm-predict
SAMTOOLS_VIEW_FILTER = -q 20 -F 0x0704
FILTER_MAX_LQR = 30, 20
FASTQ_PREFIX = 
BWA_EXE = $(BIN_DIR)/bwa
THUNDER_DIR = thunder
LD_OVERLAP = 1000
VERIFY_BAM_ID_EXE = $(BIN_DIR)/verifyBamID
qplot_DEPEND = recab
recab_EXT = recal.bam
qplot_REQ_EXES = $(QPLOT_EXE)
RUN_VCFPILEUP = FALSE
NOBAQ_SUBSTRINGS = SOLID
qplot_MIN_MAP_QUAL = --minMapQuality 0
VCFSPLIT = perl $(SCRIPT_DIR)/vcfSplit.pl
verifyBamID_REQ_EXES = $(VERIFY_BAM_ID_EXE)
FILTER_MAX_STR = 20, 10
UNIT_CHUNK = 5000000
SORT_MAX_MEM = 2000000000
REF_DIR = <gotcloud_root>/test/chr20Ref
verifyBamID_CMD = $(VERIFY_BAM_ID_EXE) --bam $(basename $<) --out $(basename $@) $(verifyBamID_PARAMS) $(verifyBamID_USER_PARAMS)
MERGE_TMP = $(TMP_DIR)/alignment.pol
SLEEP_MULT = 
PVCF_DIR = pvcfs
BEAGLE4_DIR = beagle4
EXT = 
FILTER_MAX_AOZ = 
dedup_RMDEP = 1
GENOMESTRIP_PLOIDY_MAP = 
RUN_GLFMULTIPLES = FALSE
QC_DIR = $(OUT_DIR)/QCFiles
cram_CMD = $(SAMTOOLS_EXE) view -C -T $(REF) $(basename $<) > $(basename $@)
RUN_SUBSET = FALSE
MAKE_BASE_NAME_PIPE = gotcloud
EXT_CHR_SUB = CHR
INVNORM = $(BIN_DIR)/invNorm
FINAL_BAM_DIR = $(OUT_DIR)/bams
recab_OUT = $(basename $@)
GENOMESTRIP_OUT = $(OUT_DIR)/sv
TABIX = $(BIN_DIR)/tabix
ALIGN_CRAM_OUTPUT = false
recab_STORE_OQ = 
dedup_DEPEND = merge
recab_CMD = $(BAM_EXE) $(recab_RUN_DEDUP)recab --in $(basename $^) --out $(recab_OUT) $(recab_PARAMS) $(recab_USER_PARAMS) $(BAMUTIL_THINNING) $(GEN_CRAM)
VCFPILEUP = $(BIN_DIR)/vcfPileup
FILTER_MAX_IOR = 
THUNDER_STATES = --states 400 --weightedStates 300
FILTER_MAX_ABL = 70, 65
NEG_SAMPLE = 100
MOSAIK_THREADS = -p 1
index_DEPEND = recab
POS_SAMPLE = 100
FILTER_MAX_SAMPLE_DP = 1000
RUN_BEAGLE4 = FALSE
GLFMULTIPLES = $(BIN_DIR)/glfMultiples --minMapQuality 0 --minDepth 1 --maxDepth 10000000 --uniformTsTv --smartFilter
USE_SVMMODEL = FALSE
INDEL_PREFIX = $(REF_DIR)/1kg.pilot_release.merged.indels.sites.hg19
polish_CMD = $(BAM_EXE) polishBam -f $(REF) --AS $(AS) --UR file:$(REF) --checkSQ -i $(basename $^) -o $(basename $@) -l $(basename $@).log $(BAMUTIL_THINNING)
SCRIPT_DIR = $(GOTCLOUD_ROOT)/scripts
cram_EXT = cram
VCFPASTE = perl $(SCRIPT_DIR)/vcfPaste.pl
GLFMERGE = $(BIN_DIR)/glfMerge
BAM_PREFIX = 
dedup_CMD = $(BAM_EXE) dedup --in $(basename $^) --out $(basename $@) $(dedup_PARAMS) $(dedup_USER_PARAMS) $(BAMUTIL_THINNING)
BASE_SECTION = global
recab_DEPEND = merge
POL_TMP = $(TMP_DIR)/alignment.pol
BWA_RM_FASTQ = 
FILTER_MIN_QUAL = 5
GENOMESTRIP_PARAM = $(GENOMESTRIP_SVTOOLKIT_DIR)/conf/genstrip_parameters.txt
OMNI_VCF = $(REF_DIR)/1000G_omni2.5.b37.sites.chr20.PASS.vcf.gz
FILTER_MIN_FIC = -20, -10
recab_USER_PARAMS = 
SM_GLF_DIR = glfs/samples
SVMLEARN = $(BIN_DIR)/svm-train
AS = NCBI37
dedup_PARAMS = --log $(basename $@).metrics
GENOMESTRIP_SVTOOLKIT_DIR = $(GOTCLOUD_ROOT)/src/svtoolkit
FILTER_MAX_MQ30 = 
MAP_TYPE = BWA
recab_DIR = $(FINAL_BAM_DIR)
qplot_CMD = $(VIEW_CRAM) $(QPLOT_EXE) --reference $(REF) --dbsnp $(DBSNP_VCF) --stats $(basename $@).stats --Rcode $(basename $@).R $(qplot_MIN_MAP_QUAL) --bamlabel $(qplot_LABELS) $(qplot_IN)
RUN_SPLIT4 = FALSE
EXT_FILT = perl $(SCRIPT_DIR)/vcf-external-filter
cramIndex_CMD = $(SAMTOOLS_EXE) index $(basename $^)
SVM_SCRIPT = perl $(SCRIPT_DIR)/run_libsvm.pl
SAMTOOLS_SORT_EXE = $(SAMTOOLS_EXE)
[indel_mergeBam] : bam_mergeBam
BASE_SECTION = bam_mergeBam
DIR = $(OUT_DIR)/indel/mergedBams
[singleBamRecab] : bam_recab
BASE_SECTION = bam_recab
SAMPLES = SINGLE_BAM
[bamQC_createIndex]
BASE_SECTION = global
STEPS = bam_qplot bam_indexBam bam_createIndex_verifyBamID
[indexBase] : indel
INPUT_FILE = $($(DEPEND)/OUTPUT)
BASE_SECTION = indel
CMD = $(VT_EXE) index $(INPUT_FILE) 2> $(OUTPUT).log
OUTPUT = $(INPUT_FILE).csi
[indelChr] : indel
INTERVAL_CMD = -i ?(CHR)
INTERVAL_EXT = ?(CHR).
BASE_SECTION = indel
[recabQC_qplot] : bam_qplot
BASE_SECTION = bam_qplot
DIR = $(OUT_DIR)/recab/QCFiles
DEPEND = multiBamRecab singleBamRecab
LABELS = --bamlabel recal
[recabQC]
BASE_SECTION = global
STEPS = recab_mergeBam singleBamRecab multiBamRecab recab_indexBam recabQC_qplot recabQC_verifyBamID
[bam_verifyBamID]
NEED_BAI = 1
INPUT_FILE = ?(BAM)
USER_PARAMS = 
BASE_SECTION = global
DIR = $(OUT_DIR)/QCFiles
OUTPUT = $(DIR)/?(SAMPLE).genoCheck
CMD = $(VERIFY_BAM_ID_EXE) --bam $(INPUT_FILE) --out $(OUTPUT) $(PARAMS) $(USER_PARAMS) 2> $(OUTPUT).err
DEPEND = PER_SAMPLE_BAM
PARAMS = --vcf $(HM3_VCF)
[bam2fastq]
IGNORE_REF_CHR_CHECK = 1
BASE_SECTION = global
STEPS = bam2fastqStep fastqlist
[concatG] : indelChr
BASE_SECTION = indelChr
CMD = $(VT_EXE) concat -L $(genotypeBase/FILELIST) -o $(OUTPUT) 2> $(DIR)/concat.$(INTERVAL_EXT)log
DIR = $(genotypeBase/DIR)
OUTPUT = $(DIR)/?(SAMPLE).genotypesConcat.$(INTERVAL_EXT)$(OUTPUT_EXT)
DEPEND = multiBamGenotype singleBamGenotype
FILELIST = $(OUT_DIR)/indel/aux/merge.$(mergeG/INTERVAL_EXT)vcf.list.txt
[bam2fastqStepFromClean]
BASE_SECTION = global
CMD = $(BAM_EXE) bam2fastq --in $(cleanUpBam/OUTPUT) --outBase $(OUTPUT) --splitRG --readname --gzip 2> $(OUTPUT)2fastq.log
OUTPUT = $(DIR)/?(BAM)
DIR = $(OUT_DIR)/fastqs
DEPEND = cleanUpBam
[bam2fastqStep]
BASE_SECTION = global
CMD = $(PIPE)$(BAM_EXE) bam2fastq --in $(BAM2FASTQ_INPUT) --outBase $(OUTPUT) --splitRG --gzip 2> $(OUTPUT)2fastq.log
OUTPUT = $(DIR)/?(BAM)
DIR = $(OUT_DIR)/fastqs
DEPEND = BAM
BAM2FASTQ_INPUT = ?(BAM)
PIPE = 
[bam_indexBam]
INPUT_FILE = ?(BAM)
BASE_SECTION = global
CMD = $(SAMTOOLS_EXE) index $(INPUT_FILE) 2> $(OUTPUT).log
OUTPUT = $(INPUT_FILE).bai
DEPEND = BAM
[singleBamDiscover] : discoverBase
BASE_SECTION = discoverBase
SAMPLES = SINGLE_BAM
[indexC] : indexBase
BASE_SECTION = indexBase
OUTPUT = $(INPUT_FILE).tbi
DEPEND = concat
[indexMG] : indexBase
BASE_SECTION = indexBase
DEPEND = mergeG
[multiBamRecab] : bam_recab
RECAB_INPUT = $(recab_mergeBam/OUTPUT)
BASE_SECTION = bam_recab
DEPEND = recab_mergeBam
SAMPLES = MULTI_BAM
[cleanUpBam]
BASE_SECTION = global
CMD = ($(BAM_EXE) squeeze --in ?(BAM) --keepDups --rmTags AS:i,BD:Z,BI:Z,XS:i,MC:Z,MD:Z,NM:i,MQ:i --out - | $(SAMTOOLS_EXE) view -S -b -F 0x800 - | $(SAMTOOLS_SORT_EXE) sort -n -T $(DIR)/?(BAM).temp - | $(SAMTOOLS_EXE) fixmate - $(OUTPUT)) 2> $(OUTPUT)2fastq.log
OUTPUT = $(DIR)/?(BAM)
DIR = $(OUT_DIR)/fastqs/tmp.cleanUpBam
DEPEND = BAM
[indexP] : indexBase
BASE_SECTION = indexBase
DEPEND = probes
[indexD] : indexBase
INPUT_FILE = $(discoverBase/OUTPUT)
BASE_SECTION = indexBase
DEPEND = multiBamDiscover singleBamDiscover
[cleanUpBam2fastq]
IGNORE_REF_CHR_CHECK = 1
BASE_SECTION = global
STEPS = cleanUpBam bam2fastqStepFromClean fastqlistFromClean
[multiBamDiscover] : discoverBase
BASE_SECTION = discoverBase
DISCOVER_INPUT = $(indel_mergeBam/OUTPUT)
DEPEND = indel_indexMBam
SAMPLES = MULTI_BAM
[indelNoInterval] : indel
INTERVAL_CMD = 
INTERVAL_EXT = 
BASE_SECTION = indel
[binBam2fastqlist] : fastqlist
BASE_SECTION = fastqlist
DEPEND = binBam2fastqStep
[indexM] : indexBase
BASE_SECTION = indexBase
DEPEND = merge
[multiBamGenotype] : genotypeBase
BASE_SECTION = genotypeBase
DEPEND = indel_indexMBam $(genotypeBase/DEPEND)
SAMPLES = MULTI_BAM
GENOTYPE_INPUT = $(indel_mergeBam/OUTPUT)
[bam_createIndex_verifyBamID] : bam_verifyBamID
NEED_BAI = 0
BASE_SECTION = bam_verifyBamID
DEPEND = BAM bam_indexBam
[recab_indexBam] : bam_indexBam
INPUT_FILE = $(bam_recab/OUTPUT)
BASE_SECTION = bam_indexBam
DEPEND = multiBamRecab singleBamRecab
[singleBamGenotype] : genotypeBase
BASE_SECTION = genotypeBase
DEPEND = BAM $(genotypeBase/DEPEND)
SAMPLES = SINGLE_BAM
GENOTYPE_INPUT = ?(BAM)
[binBam2fastq]
IGNORE_REF_CHR_CHECK = 1
BASE_SECTION = global
STEPS = binBam2fastqStep binBam2fastqlist
[bam_recab]
USER_PARAMS = 
RECAB_INPUT = ?(BAM)
BASE_SECTION = global
CMD = $(BAM_EXE) dedup --log $(OUTPUT).metrics --recab --in $(RECAB_INPUT) --out $(OUTPUT) --refFile $(REF) --dbsnp $(DBSNP_VCF) $(USER_PARAMS) $(BAMUTIL_THINNING)
OUTPUT = $(DIR)/?(SAMPLE).recal.bam
DIR = $(OUT_DIR)/recab
DEPEND = BAM
[bamQC]
BASE_SECTION = global
STEPS = bam_qplot bam_verifyBamID
[genotypeBase] : indelChrPos
BASE_SECTION = indelChrPos
CMD = $(VT_EXE) genotype -b $(GENOTYPE_INPUT) -r $(REF) -s ?(SAMPLE) -o $(OUTPUT) $(INTERVAL_CMD) $(probes/OUTPUT) 2> $(DIR)/genotype.$(INTERVAL_EXT)log
DIR = $(discoverBase/DIR)
OUTPUT = $(DIR)/?(SAMPLE).genotypes.$(INTERVAL_EXT)$(OUTPUT_EXT)
DEPEND = probes indexP
FILELIST = $(concatG/OUTPUT).list.txt
GENOTYPE_INPUT = ?(BAM)
[merge] : indelChr
BASE_SECTION = indelChr
CMD = $(VT_EXE) merge_candidate_variants -L $(discoverBase/FILELIST) -o $(OUTPUT) $(INTERVAL_CMD) 2> $(DIR)/all.sites.$(INTERVAL_EXT)$(OUTPUT_EXT).log
DIR = $(OUT_DIR)/indel/aux
OUTPUT = $(DIR)/all.sites.$(INTERVAL_EXT)$(OUTPUT_EXT)
DEPEND = indexD
[bam_qplot]
BASE_SECTION = global
CMD = $(QPLOT_EXE) --reference $(REF) --dbsnp $(DBSNP_VCF) --stats $(OUTPUT).stats --Rcode $(OUTPUT).R $(MIN_MAP_QUAL) $(LABELS) ?(INPUT) 2> $(OUTPUT).err
MIN_MAP_QUAL = --minMapQuality 0
OUTPUT = $(DIR)/?(SAMPLE).qplot
DIR = $(OUT_DIR)/QCFiles
DEPEND = BAM
LABELS = 
[indexG] : indexBase
INPUT_FILE = $(genotypeBase/OUTPUT)
BASE_SECTION = indexBase
DEPEND = multiBamGenotype singleBamGenotype
[recab_mergeBam] : bam_mergeBam
BASE_SECTION = bam_mergeBam
DIR = $(OUT_DIR)/recab/mergedBams
[indel]
VT_EXE = $(BIN_DIR)/vt
BASE_SECTION = global
OUTPUT_EXT = bcf
STEPS = indel_mergeBam indel_indexMBam singleBamDiscover multiBamDiscover indexD merge indexM probes indexP singleBamGenotype multiBamGenotype indexG concatG indexCG mergeG indexMG concat indexC
NO_CRAM = 1
UNIT_CHUNK = 20000000
OUTPUT_TYPE = +
[fastqlist]
BASE_SECTION = global
CMD = find $(bam2fastqStep/DIR)/. -name "*.list" |xargs awk '{if(FNR != 1 || (FNR == NR)) {print $0}}' > $(OUTPUT)
OUTPUT = $(FASTQ_LIST)
DEPEND = bam2fastqStep
LOCAL = 1
[bam_mergeBam]
BASE_SECTION = global
INPUT_JOIN = --in
CMD = $(BAM_EXE) mergeBam --in ?(INPUT) --out $(OUTPUT)
OUTPUT = $(DIR)/?(SAMPLE).bam
DIR = $(OUT_DIR)/mergedBams
DEPEND = BAM
SAMPLES = MULTI_BAM
[concat] : indel
BASE_SECTION = indel
CMD = $(VT_EXE) concat ?(INPUT) -o $(OUTPUT) 2> $(DIR)/concat.log
DIR = $(OUT_DIR)/indel/final
OUTPUT = $(DIR)/all.genotypes.$(OUTPUT_EXT)
OUTPUT_EXT = vcf.gz
DEPEND = mergeG
[recabQC_verifyBamID] : bam_verifyBamID
INPUT_FILE = $(bam_recab/OUTPUT)
BASE_SECTION = bam_verifyBamID
DIR = $(OUT_DIR)/recab/QCFiles
DEPEND = multiBamRecab singleBamRecab recab_indexBam
[fastqlistFromClean]
BASE_SECTION = global
CMD = find $(bam2fastqStepFromClean/DIR)/. -name "*.list" |xargs awk '{if(FNR != 1 || (FNR == NR)) {print $0}}' > $(OUTPUT)
OUTPUT = $(FASTQ_LIST)
DEPEND = bam2fastqStepFromClean
LOCAL = 1
[indel_indexMBam] : indel
INPUT_FILE = $($(DEPEND)/OUTPUT)
BASE_SECTION = indel
CMD = $(SAMTOOLS_EXE) index $(INPUT_FILE) 2> $(OUTPUT).log
OUTPUT = $(INPUT_FILE).bai
DEPEND = indel_mergeBam
[probes] : indelChrPos
BASE_SECTION = indelChrPos
CMD = $(VT_EXE) construct_probes $(merge/OUTPUT) -r $(REF) -o $(OUTPUT) $(INTERVAL_CMD) 2> $(DIR)/probes.$(INTERVAL_EXT)log
OUTPUT = $(DIR)/probes.sites.$(INTERVAL_EXT)$(OUTPUT_EXT)
DIR = $(OUT_DIR)/indel/aux
DEPEND = merge indexM
[recab]
BASE_SECTION = global
STEPS = recab_mergeBam singleBamRecab multiBamRecab recab_indexBam
[binBam2fastqStep] : bam2fastqStep
BASE_SECTION = bam2fastqStep
BAM2FASTQ_INPUT = -.ubam
PIPE = $(BAM_EXE) squeeze --binMid --binQualS 2,3,10,20,25,30,35,40,50 --keepDups --in ?(BAM) --out -.ubam |
[mergeG] : indelChr
BASE_SECTION = indelChr
CMD = $(VT_EXE) merge -L $(concatG/FILELIST) -o $(OUTPUT_TYPE) | $(VT_EXE) compute_features $(OUTPUT_TYPE) -o $(OUTPUT_TYPE) 2> $(DIR)/compute_features.$(INTERVAL_EXT)log | $(VT_EXE) remove_overlap $(OUTPUT_TYPE) -o $(OUTPUT) 2> $(DIR)/remove_overlap.$(INTERVAL_EXT)log
DIR = $(OUT_DIR)/indel/final/merge
OUTPUT = $(DIR)/all.genotypes.$(INTERVAL_EXT)$(OUTPUT_EXT)
DEPEND = indexCG
[discoverBase] : indelNoInterval
BASE_SECTION = indelNoInterval
DISCOVER_INPUT = ?(BAM)
OUTPUT = $(DIR)/?(SAMPLE).sites.$(INTERVAL_EXT)$(OUTPUT_EXT)
DIR = $(OUT_DIR)/indel/indelvcf/?(SAMPLE)
FILELIST = $(OUT_DIR)/indel/aux/candidate_vcf_files.txt
normalize_CMD = $(VT_EXE) normalize $(OUTPUT_TYPE) -r $(REF) -o $(OUTPUT_TYPE) 2> $(DIR)/normalize.$(INTERVAL_EXT)log
CMD = $(discover_CMD) | $(normalize_CMD) | $(mergedups_CMD)
discover_CMD = $(VT_EXE) discover -b $(DISCOVER_INPUT) -o $(OUTPUT_TYPE) -v $(VARIANT_TYPE) -r $(REF) -s ?(SAMPLE) $(INTERVAL_CMD) 2> $(DIR)/discover.$(INTERVAL_EXT)log
DEPEND = BAM
VARIANT_TYPE = indels
mergedups_CMD = $(VT_EXE) mergedups $(OUTPUT_TYPE) -o $(OUTPUT) 2> $(DIR)/mergedups.$(INTERVAL_EXT)log
[indelChrPos] : indel
INTERVAL_CMD = -i ?(CHR):?(START)-?(END)
INTERVAL_EXT = ?(CHR).?(START).?(END).
BASE_SECTION = indel
[indexCG] : indexBase
BASE_SECTION = indexBase
DEPEND = concatG
